Motion planning: OpenRave
----------
Allgemeines zu ROS:
https://www.generationrobots.com/blog/de/ros-robot-operating-system/

ROS Version:
melodic

gedit als editor
netbeans mit c++?

(nur Kern) ROS starten (neues Konsolenfenster):
roscore

Laufende Nodes anschauen:
rosnode list

Node Verbindungen anschauen:
rosrun rqt_graph rqt_graph

neues Kommando installieren:
sudo apt-get install ros-<distro="melodic">-<Kommando>
//sudo apt-get install python-catkin-tools ->gibt catkin clean
//sudo apt-get install python-wstool ->gibt wstool, um multiple workspaces zu verwalten

Mehrere gleiche Node-Typen aufmachen:
name ändern in vicon-launch

Ros Messages anschauen:
rosmsg show [message type]

Rviz (3D-Visualisierungssystem) zum anschauen

ROS Pfad: /opt/ros/melodic

Repo bereinigen:
//catkin clean -> tut nicht

Daten aufzeichnen und abspielen:
http://wiki.ros.org/ROS/Tutorials/Recording%20and%20playing%20back%20data

Cmake:
//https://crascit.com/2016/01/31/enhanced-source-file-handling-with-target_sources/
https://rix0r.nl/blog/2015/08/13/cmake-guide/

IDE: http://wiki.ros.org/IDEs
https://code.visualstudio.com/docs/setup/linux
https://marketplace.visualstudio.com/items?itemName=ms-iot.vscode-ros
code


----------
Hardware anschalten:

1. Stecker einstecken
2. anderen Rechner einschalten
3. anmelden: mobmonrob
4. vicon tracker neuestes ausführen
Wenn weißes Kabel nicht drin:
reinstecken
Netzwerk Konfig:
    192.168.10.1
    255.255.255.0


----------
Bauen:

source devel/setup.bash
am Anfang ausführen
->künftig vielleicht: https://answers.ros.org/question/205976/sourcing-from-multiple-workspaces/

Projekt bauen, von src initialisieren nach devel und build gelöscht:
catkin_make (clean)


----------
Laufen lassen:

source devel/setup.bash
am Anfang ausführen
->künftig vielleicht: https://answers.ros.org/question/205976/sourcing-from-multiple-workspaces/

(Kern enthalten) Nodes lokal starten: ->sonst schließt sich die erste Verbindung nach Start der zweiten automatisch
//roslaunch vicon_bridge vicon.launch
roslaunch vicon_bridge vicon_rviz.launch

Nachrichten auslesen im Worspace:
Neues Konsolenfenster:
//rostopic echo vicon/test1/test1
rostopic echo marker

----------
Getan:

Uhrzeit eingestellt
Dokumentation gesichtet
Tutorial angefangen
    ---> aktueller Stand: http://wiki.ros.org/ROS/Tutorials/UsingRqtconsoleRoslaunch
    //Problem: 2 seperate workspaces
        Lösung: source devel/setup.bash am Anfang ausführen (macht meinen temporär zum 1.)
    //Problem: roslaunch vicon_bridge vicon.launch -->Fehler wegen zwei Repos?
        Lösung: http://wiki.ros.org/catkin/Tutorials/workspace_overlaying
Tutorial weiter
src analysieren
git aktivieren
Unklarheiten klären
Integration beginnen
    Neuen Node erstellen
    VS code
    .launch zum Laufen bekommen
Rviz Daten Dummys bauen mit Code aus openpose -> MarkerBuilder::getTestMarker()
vicon_bridge zu mehreren Dateien refaktorieren
    ->testen gegen: roslaunch vicon_bridge vicon.launch
---
//Header erstellen
//main auslagern
---
Daten aus vicon_bridge holen
    Code verstehen
    Überlegen, wo angreifen
    X Sämtlichen ROS spezifischen Code raus holen
        ->zu aufwändig. Erst mal nur was einfügen, dass ich die Marker abgreifen kann bei der Erstellung
    ->MarkersProcessor

----------
Aktuell:


CMAKE nochmal anschauen verbessern: https://pabloariasal.github.io/2018/02/19/its-time-to-do-cmake-right/

----------
Tun:

Vicon ROS ergänzen um Code aus openpose (kopieren) -> https://github.com/stevenjj/openpose_ros/blob/master/skeleton_extract_3d/src/skeleton_extract_3d_visualization_node.cpp
vicon_bridge soll rviz kompatible messages ausgeben -> fixe Konfiguration für Message Felder, die vicon nicht liefert
neuer node in vicon_bridge erstellen
    -> code umzustrukturieren


Links:
http://wiki.ros.org/ROS/Tutorials/CreatingMsgAndSrv
http://wiki.ros.org/msg
-->http://wiki.ros.org/ROS/Tutorials/WritingPublisherSubscriber%28c%2B%2B%29
http://wiki.ros.org/ROS/Tutorials
http://wiki.ros.org/ROS/Tutorials/Creating%20a%20Package%20by%20Hand
http://wiki.ros.org/rviz/Tutorials/Markers%3A%20Basic%20Shapes
http://wiki.ros.org/rviz/Tutorials/Markers%3A%20Points%20and%20Lines
http://wiki.ros.org/rviz/DisplayTypes/Marker
http://docs.ros.org/latest/api/catkin/html/howto/format2/building_msgs.html
http://wiki.ros.org/vicon_bridge


----------
Künftig:

Zunächst alles, was in ros mehr macht als nur Loggging, raus nehmen
Alles ros Spezifische aus vicon_bridge raus nehmen
vicon_bridge.cpp in vicon_receiver.cpp umbenennen


----------
Klassenstruktur:

Main: hat einen NodeStarter, dem der ViconRvizNode übergeben wird
NodeStarter: enthält Boiler Plate, um Nodes auszuführen, polymorph
ViconRvizNode: enthält Code, der für den Node spezifisch ist -> was wird gepublished, ...

MarkerBuilder:
    enhält und speichert Konfiguration(en), um Marker zu bauen und baut sie
    ist konfigurierbar
    Mischung aus: Wird wo anders konfiguriert (template), sind Standardwerte da (Methodenaufruf), Parameterübergabe
    Templates erstellen für semantisch sinnvolle Marker
    https://github.com/stevenjj/openpose_ros/blob/master/skeleton_extract_3d/src/skeleton_extract_3d_visualization_node.cpp
    http://docs.ros.org/api/visualization_msgs/html/msg/Marker.html

vicon_bridge (->vicon_receiver): holt Daten von vicon
Builder Bridge Kleber: holt die Daten von der Bridge und gibt sie dem Builder
----------

vicon API Dokumentation

Achtung: In Header Dateien kann man Abhängigkeiten einfach deklarieren, statt sie mit #include einzufügen








Wenn Zeit habe: Silvan nochmal fragen: Er meinte, ich solle für Oliver was bauen, das sie Samplerate des vicon Systems ausliest und damit was macht.


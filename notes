Motion planning: OpenRave

git alte Version temporär nutzen:
https://makandracards.com/ff-it/21967-git-temporarily-revert-to-previous-commit

Allgemeines zu ROS:
https://www.generationrobots.com/blog/de/ros-robot-operating-system/

ROS Version:
melodic

(nur Kern) ROS starten (neues Konsolenfenster):
roscore

Laufende Nodes anschauen:
rosnode list

Node Verbindungen anschauen:
rosrun rqt_graph rqt_graph

neues Kommando installieren:
sudo apt-get install ros-<distro="melodic">-<Kommando>
//sudo apt-get install python-catkin-tools ->gibt catkin clean
//sudo apt-get install python-wstool ->gibt wstool, um multiple workspaces zu verwalten

Mehrere gleiche Node-Typen aufmachen:
name ändern in vicon-launch

Ros Messages anschauen:
rosmsg show [message type]

Rviz (3D-Visualisierungssystem) zum anschauen
https://stackoverflow.com/questions/52420672/ros-rviz-how-to-visualize-a-point-cloud-that-doesnt-have-a-fixed-frame-transfo

ROS Pfad: /opt/ros/melodic

Daten aufzeichnen und abspielen:
http://wiki.ros.org/ROS/Tutorials/Recording%20and%20playing%20back%20data

Cmake:
//https://crascit.com/2016/01/31/enhanced-source-file-handling-with-target_sources/
https://rix0r.nl/blog/2015/08/13/cmake-guide/

IDE: http://wiki.ros.org/IDEs
https://code.visualstudio.com/docs/setup/linux
https://marketplace.visualstudio.com/items?itemName=ms-iot.vscode-ros
code

Links:
http://wiki.ros.org/ROS/Tutorials/CreatingMsgAndSrv
http://wiki.ros.org/msg
-->http://wiki.ros.org/ROS/Tutorials/WritingPublisherSubscriber%28c%2B%2B%29
http://wiki.ros.org/ROS/Tutorials
http://wiki.ros.org/ROS/Tutorials/Creating%20a%20Package%20by%20Hand
http://wiki.ros.org/rviz/Tutorials/Markers%3A%20Basic%20Shapes
http://wiki.ros.org/rviz/Tutorials/Markers%3A%20Points%20and%20Lines
http://wiki.ros.org/rviz/DisplayTypes/Marker
http://docs.ros.org/latest/api/catkin/html/howto/format2/building_msgs.html
http://wiki.ros.org/vicon_bridge


----------
Hardware anschalten:

1. Stecker einstecken
2. anderen Rechner einschalten
3. anmelden: mobmonrob
4. vicon tracker neuestes ausführen
Wenn weißes Kabel nicht drin:
reinstecken
Netzwerk Konfig:
    192.168.10.1
    255.255.255.0


----------
Bauen:

source devel/setup.bash
am Anfang ausführen
->künftig vielleicht: https://answers.ros.org/question/205976/sourcing-from-multiple-workspaces/

Projekt bauen, von src initialisieren nach devel und build gelöscht:
catkin_make (clean)


----------
Laufen lassen:

source devel/setup.bash
am Anfang ausführen
->künftig vielleicht: https://answers.ros.org/question/205976/sourcing-from-multiple-workspaces/

(Kern enthalten) Nodes lokal starten: ->sonst schließt sich die erste Verbindung nach Start der zweiten automatisch
//roslaunch vicon_bridge vicon.launch
roslaunch vicon_bridge vicon_rviz.launch

Nachrichten auslesen im Worspace:
Neues Konsolenfenster:
//rostopic echo vicon/test1/test1
rostopic echo vicon_rviz_marker

rviz laufen lassen
rosrun --debug rviz rviz


----------
Getan:

Uhrzeit eingestellt
Dokumentation gesichtet
Tutorial angefangen
    ---> aktueller Stand: http://wiki.ros.org/ROS/Tutorials/UsingRqtconsoleRoslaunch
    //Problem: 2 seperate workspaces
        Lösung: source devel/setup.bash am Anfang ausführen (macht meinen temporär zum 1.)
    //Problem: roslaunch vicon_bridge vicon.launch -->Fehler wegen zwei Repos?
        Lösung: http://wiki.ros.org/catkin/Tutorials/workspace_overlaying
Tutorial weiter
src analysieren
git aktivieren
Unklarheiten klären
Integration beginnen
    Neuen Node erstellen
    VS code
    .launch zum Laufen bekommen
Rviz Daten Dummys bauen mit Code aus openpose -> MarkerBuilder::getTestMarker()
vicon_bridge zu mehreren Dateien refaktorieren
    ->testen gegen: roslaunch vicon_bridge vicon.launch
---
//Header erstellen
//main auslagern
---
Daten aus vicon_bridge holen
    Code verstehen
    Überlegen, wo angreifen
    X Sämtlichen ROS spezifischen Code raus holen
        ->zu aufwändig. Erst mal nur was einfügen, dass ich die Marker abgreifen kann bei der Erstellung
    ->MarkersProcessor nimmt die Daten
CMAKE nochmal anschauen verbessern
markers Sachen umbennen zum spezifizieren, was gemeint ist
vicon_bridge Unterscheidung, ob normal aufgerufen oder als Lib
MarkersProcessor hat einen MarkerBuilder und kennt einen markerPublisher
RvizMarkerBuilder bekommt die Daten von ViconMarkersProcessor und hat seine Konfiguration
Array zu Marker und wieder zurück
CMake include Fehler beheben
!!!Seltsamen Bug umgangen: Markers dürfen nicht von Methoden zurück gegeben werden weil sonst segfault
    falsch!!!! Eigentlich habe ich nur ein return bei einer Methode vergessen. Der Compiler hat das aber nicht bemängelt.
    ->dauerhaft verhindert, in dem in CMakeLists.txt Compiler Warnungen aktiviert habe
Daten zurück geben geht nicht beheben
vicon_bridge Poses holen (statt Marker, was ich zuvor dachte und implementierte)
in Rviz ausprobieren
    wie rviz anschließen?
    ---->funktioniert; aber: Oliver fragen, wie das im Endeffekt aussehen soll
RvizMarkerBuilder Konfiguration auf Methoden Parameter verlagern
RvizMarkerBuilder Standard Sachen initialisieren noch
    ->was auskommentiert: Methode zur Konstruktion erstellen
    ->Name ändern in BuildStandardMarker
rviz verbessern


----------
Aktuell:

Doch Marker benutzen aus der vicon_bridge.
    Dummy für Orientierung.
ViconPoseProcessor umbenennen


----------
Tun:

Später auch Segment-Daten holen zum Plotten von Verbindungen.
Scale, Color im Launchfile konfigurieren
    Von vicon_bridge abschauen


----------
Vielleicht tun:

RvizMarkerBuilder verbessern
Zunächst alles, was in ros mehr macht als nur Logging, raus nehmen
Alles ros Spezifische aus vicon_bridge raus nehmen und dort insgesamt etwas aufräumen -> zu aufwändig gerade. Dauert villeicht 3*4h Arbeitstage
vicon_bridge.cpp in vicon_receiver.cpp umbenennen (auch *.h)
https://github.com/KumarRobotics/vicon/blob/master/vicon_driver/src/vicon_driver.cpp


----------
Klassenstruktur:

Main: hat einen NodeStarter, dem der ViconRvizNode übergeben wird
NodeStarter: enthält Boiler Plate, um Nodes auszuführen, polymorph
ViconRvizNode: enthält Code, der für den Node spezifisch ist -> was wird gepublished, ...

RvizMarkerBuilder:
    konvertiert vicon_bridge poses zu rviz Markern mithilfe des MarkerBuilders

MarkerBuilder:
    enhält und speichert Konfiguration(en), um Marker zu bauen und baut sie
    ist konfigurierbar
    Mischung aus: Wird wo anders konfiguriert (template), sind Standardwerte da (Methodenaufruf), Parameterübergabe
    Templates erstellen für semantisch sinnvolle Marker
    https://github.com/stevenjj/openpose_ros/blob/master/skeleton_extract_3d/src/skeleton_extract_3d_visualization_node.cpp
    http://docs.ros.org/api/visualization_msgs/html/msg/Marker.html

vicon_bridge (->vicon_receiver): holt Daten von vicon
Builder Bridge Kleber: holt die Daten von der Bridge und gibt sie dem Builder


----------
Debuggen:

catkin_make -DCMAKE_BUILD_TYPE=Debug

launch-prefix="gdb -ex run --args
ergänzen in .launch Datei. Bsp: <node pkg="vicon_bridge" type="vicon_bridgeNode" name="vicon_bridgeNode" output="screen" launch-prefix="gdb -ex run --args">

dann ganz normal ausführen.

return Taste klicken bei Nachfrage

gdb Backtrace:
bt
->return Taste, um mehr zu sehen


----------
Anderes:

Pylon SWIG Projekt: Wo bei Netbeans die lib eingefügt wird, führt dazu, dass Systembibliotheken nicht mehr eingefügt werden. ->umgehen mit von Hand; oder Kommando suchen mit dem das geht; oder Ticket erstellen, ein solches Kommando einzufügen.


----------

vicon API Dokumentation
Vicon DataStream SDK alt: S. 60(65)

